default_platform(:ios)

platform :ios do
  desc "Run UI Tests"
  lane :test do
    scan(
      scheme: "russ5",
      device: "iPhone 14 Pro",
      clean: true,
      code_coverage: true,
      result_bundle: true
    )
  end

  desc "Submit to BrowserStack"
  lane :browserstack do
    build_ios_app(
      scheme: "russ5",
      export_method: "development"
    )
    
    upload_to_browserstack_app_automate(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      file_path: lane_context[SharedValues::IPA_OUTPUT_PATH]
    )
  end
  
  desc "Run tests on BrowserStack"
  lane :browserstack_test do
    # Check if we already have an app uploaded to BrowserStack
    if ENV["BROWSERSTACK_APP_ID"]
      app_url = ENV["BROWSERSTACK_APP_ID"]
      puts "Using existing BrowserStack app ID: #{app_url}"
    else
      # Build the app for testing
      build_ios_app(
        scheme: "russ5",
        export_method: "development"
      )
      
      # Upload the app to BrowserStack
      app_url = upload_to_browserstack_app_automate(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: lane_context[SharedValues::IPA_OUTPUT_PATH]
      )
    end
    
    # Run tests on BrowserStack
    run_tests_on_browserstack(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      app_url: app_url,
      device: "iPhone 14 Pro",
      os_version: "16",
      project_name: "russ5",
      build_name: "russ5-#{Time.now.strftime('%Y%m%d%H%M%S')}",
      test_framework: "xcui",
      local: false
    )
  end
  
  desc "Build and test on BrowserStack"
  lane :browserstack_build_and_test do
    # First build the app
    browserstack
    
    # Then run the tests
    browserstack_test
  end
  
  desc "Setup provisioning profiles for development"
  lane :setup_profiles do
    # Use match to sync development certificates and provisioning profiles
    # You need to set up a private match repository first
    match(
      type: "development",
      app_identifier: ["xyz.russ.russ5", "xyz.russ.russ5.Extension"],
      readonly: is_ci, # Only read in CI, allow creating locally
      force_for_new_devices: !is_ci, # Allow updating for new devices when not in CI
      generate_apple_certs: !is_ci # Generate Apple certificates if needed when not in CI
    )
  end
  
  desc "Build the app for development"
  lane :build_dev do
    # Ensure we have the right certificates and profiles
    setup_profiles
    
    # Update project settings for the main app
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "russ5.xcodeproj",
      team_id: ENV["TEAM_ID"],
      targets: ["russ5"],
      code_sign_identity: "Apple Development",
      profile_name: "match Development xyz.russ.russ5",
      bundle_identifier: "xyz.russ.russ5"
    )
    
    # Update project settings for the extension
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "russ5.xcodeproj",
      team_id: ENV["TEAM_ID"],
      targets: ["russ5 Extension"],
      code_sign_identity: "Apple Development",
      profile_name: "match Development xyz.russ.russ5.Extension",
      bundle_identifier: "xyz.russ.russ5.Extension"
    )
    
    # Build the app
    build_ios_app(
      project: "russ5.xcodeproj",
      scheme: "russ5",
      configuration: "Debug",
      export_method: "development",
      skip_package_ipa: true,
      skip_archive: true,
      clean: true,
      output_directory: "./build"
    )
  end
  
  desc "Build the app for development using export options"
  lane :build_dev_alt do
    # Ensure we have the right certificates and profiles
    setup_profiles
    
    # Build the app with specific provisioning profiles
    build_ios_app(
      project: "russ5.xcodeproj",
      scheme: "russ5",
      configuration: "Debug",
      export_method: "development",
      export_team_id: ENV["TEAM_ID"],
      export_options: {
        provisioningProfiles: {
          "xyz.russ.russ5" => "match Development xyz.russ.russ5",
          "xyz.russ.russ5.Extension" => "match Development xyz.russ.russ5.Extension"
        }
      },
      skip_package_ipa: true,
      skip_archive: true,
      clean: true,
      output_directory: "./build"
    )
  end
  
  desc "Build the app with manual signing"
  lane :build_manual do
    # Update project settings for the main app
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "russ5.xcodeproj",
      team_id: ENV["TEAM_ID"],
      targets: ["russ5"],
      code_sign_identity: "Apple Development",
      profile_name: ENV["PROVISIONING_PROFILE_SPECIFIER"],
      bundle_identifier: "xyz.russ.russ5"
    )
    
    # Update project settings for the extension
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "russ5.xcodeproj",
      team_id: ENV["TEAM_ID"],
      targets: ["russ5 Extension"],
      code_sign_identity: "Apple Development",
      profile_name: ENV["EXTENSION_PROVISIONING_PROFILE_SPECIFIER"],
      bundle_identifier: "xyz.russ.russ5.Extension"
    )
    
    # Build the app
    xcodebuild(
      project: "russ5.xcodeproj",
      scheme: "russ5",
      configuration: "Debug",
      clean: true,
      build: true,
      allowProvisioningUpdates: true
    )
  end
end