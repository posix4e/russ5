name: Simple CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true

    - name: Install dependencies
      run: |
        gem install xcpretty -N

    - name: Check Xcode project
      run: |
        # Create logs directory
        mkdir -p ./build-logs
        
        # Print Xcode version
        xcodebuild -version | tee ./build-logs/xcode_version.log
        
        # List available schemes
        xcodebuild -list -project russ5.xcodeproj | tee ./build-logs/schemes.log || true
        
        # List available destinations
        xcodebuild -showdestinations -project russ5.xcodeproj -scheme "russ5" | tee ./build-logs/destinations.log || true

    - name: Build
      run: |
        set +e
        xcodebuild -project russ5.xcodeproj -scheme "russ5" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' clean build | tee ./build-logs/build.log
        BUILD_RESULT=$?
        set -e
        
        echo "Build exit code: $BUILD_RESULT" | tee -a ./build-logs/build_result.log
        
        if [ $BUILD_RESULT -ne 0 ]; then
          echo "Build failed with exit code $BUILD_RESULT" | tee -a ./build-logs/build_result.log
          # Try with a different destination
          xcodebuild -project russ5.xcodeproj -scheme "russ5" -sdk iphonesimulator -destination 'platform=iOS Simulator,OS=latest' clean build | tee ./build-logs/build_alt.log || true
        fi

    - name: Test
      run: |
        set +e
        xcodebuild -project russ5.xcodeproj -scheme "russ5" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test | tee ./build-logs/test.log
        TEST_RESULT=$?
        set -e
        
        echo "Test exit code: $TEST_RESULT" | tee -a ./build-logs/test_result.log
        
        if [ $TEST_RESULT -ne 0 ]; then
          echo "Tests failed with exit code $TEST_RESULT" | tee -a ./build-logs/test_result.log
          # Try with a different destination
          xcodebuild -project russ5.xcodeproj -scheme "russ5" -sdk iphonesimulator -destination 'platform=iOS Simulator,OS=latest' test | tee ./build-logs/test_alt.log || true
        fi

    - name: Collect logs
      if: always()
      run: |
        # Create directories for logs
        mkdir -p ./build-logs/xcode
        mkdir -p ./build-logs/system
        
        # Capture environment information
        echo "=== Environment Information ===" > ./build-logs/system/environment.log
        echo "macOS Version:" >> ./build-logs/system/environment.log
        sw_vers >> ./build-logs/system/environment.log 2>&1 || true
        echo "\nXcode Version:" >> ./build-logs/system/environment.log
        xcodebuild -version >> ./build-logs/system/environment.log 2>&1 || true
        echo "\nInstalled Simulators:" >> ./build-logs/system/environment.log
        xcrun simctl list devices >> ./build-logs/system/environment.log 2>&1 || true
        
        # Capture project structure
        echo "=== Project Structure ===" > ./build-logs/project_structure.log
        find . -type f -name "*.swift" | sort >> ./build-logs/project_structure.log 2>&1 || true
        
        # Capture Xcode project settings
        echo "=== Xcode Project Settings ===" > ./build-logs/project_settings.log
        xcodebuild -list -project russ5.xcodeproj >> ./build-logs/project_settings.log 2>&1 || true
        
        # Create a build summary
        echo "# Build Summary" > ./build-logs/build_summary.md
        echo "" >> ./build-logs/build_summary.md
        echo "## Environment" >> ./build-logs/build_summary.md
        echo "- macOS: $(sw_vers -productVersion 2>/dev/null || echo "Unknown")" >> ./build-logs/build_summary.md
        echo "- Xcode: $(xcodebuild -version 2>/dev/null | head -n 1 || echo "Unknown")" >> ./build-logs/build_summary.md
        echo "" >> ./build-logs/build_summary.md
        echo "## Build Status" >> ./build-logs/build_summary.md
        echo "- Build: $([ -f "./build-logs/build_result.log" ] && grep -q "Build exit code: 0" ./build-logs/build_result.log && echo "✅" || echo "❌")" >> ./build-logs/build_summary.md
        echo "- Test: $([ -f "./build-logs/test_result.log" ] && grep -q "Test exit code: 0" ./build-logs/test_result.log && echo "✅" || echo "❌")" >> ./build-logs/build_summary.md

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ./build-logs/**
          ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult
        if-no-files-found: warn
        retention-days: 5