{
  "name": "russ5",
  "version": "1.0.0",
  "description": "Safari extension build and verification",
  "scripts": {
    "create-dirs": "mkdir -p ./logs ./dist",
    "print-env": "node -e \"const fs=require('fs');const {execSync}=require('child_process');const log='./logs/environment.log';fs.writeFileSync(log,'=== Environment Information ===\\n');fs.appendFileSync(log,'macOS Version:\\n'+execSync('sw_vers',{encoding:'utf8'})+'\\n');fs.appendFileSync(log,'Xcode Version:\\n'+execSync('xcodebuild -version',{encoding:'utf8'})+'\\n');try{fs.appendFileSync(log,'Available schemes:\\n'+execSync('xcodebuild -list -project russ5.xcodeproj',{encoding:'utf8'})+'\\n');}catch(e){fs.appendFileSync(log,'Error getting schemes: '+e.message+'\\n');}\"",
    "validate-js": "node ./scripts/validate-js.js",
    "setup-signing": "node ./scripts/setup-signing.js",
    "build-xcode": "node -e \"const {execSync}=require('child_process');try{console.log('Building main app...');execSync('xcodebuild -project russ5.xcodeproj -scheme \\'russ5\\' -configuration Debug -allowProvisioningUpdates clean build | tee ./logs/build.log',{stdio:'inherit'});}catch(e){console.log('❌ Main app build failed, trying extension only...');execSync('xcodebuild -project russ5.xcodeproj -scheme \\'russ5 Extension\\' -configuration Debug -allowProvisioningUpdates clean build | tee ./logs/extension_build.log',{stdio:'inherit'});}\"",
    "build-fastlane": "node -e \"const {execSync}=require('child_process');try{if(process.env.MATCH_PASSWORD){console.log('Building with fastlane match...');execSync('fastlane build_dev',{stdio:'inherit'});}else{console.log('Building with fastlane manual signing...');execSync('fastlane build_manual',{stdio:'inherit'});}}catch(e){console.error('❌ Fastlane build failed:',e.message);process.exit(1);}\"",
    "build": "npm run build-xcode",
    "verify-build": "node ./scripts/verify-extension.js",
    "create-summary": "node ./scripts/create-summary.js",
    "package-extension": "node -e \"const fs=require('fs');const path=require('path');const {execSync}=require('child_process');try{const findCmd='find ~/Library/Developer/Xcode/DerivedData -path \\'*/Build/Products/Debug/*.appex\\' -type d | head -1';const extensionPath=execSync(findCmd,{encoding:'utf8'}).trim();if(!extensionPath){throw new Error('Extension not found');}console.log('Found extension at:',extensionPath);execSync(`cp -R '${extensionPath}' ./dist/`,{stdio:'inherit'});process.chdir('./dist');execSync('zip -r safari-extension.zip *.appex',{stdio:'inherit'});process.chdir('..');console.log('✅ Extension packaged at ./dist/safari-extension.zip');}catch(e){console.error('❌ Could not find or package extension:',e.message);execSync('find ~/Library/Developer/Xcode/DerivedData -path \\'*/Build/Products/Debug/*\\' -type d',{stdio:'inherit'});process.exit(1);}\"",
    "encode-certificates": "node ./scripts/encode-certificates.js",
    "ci": "npm run create-dirs && npm run print-env && npm run setup-signing && npm run validate-js && npm run build && npm run verify-build && npm run create-summary && npm run package-extension",
    "ci-fastlane": "npm run create-dirs && npm run print-env && npm run setup-signing && npm run build-fastlane && npm run verify-build && npm run create-summary && npm run package-extension",
    "precommit": "npm run validate-js",
    "match-sync": "node -e \"const {execSync}=require('child_process');console.log('Running match development...');execSync('fastlane match development --app_identifier xyz.russ.russ5,xyz.russ.russ5.Extension',{stdio:'inherit'});\"",
    "match-test": "node -e \"const {execSync}=require('child_process');console.log('Testing with:\\nTEAM_ID: ' + process.env.TEAM_ID + '\\nFASTLANE_APPLE_ID: ' + process.env.FASTLANE_APPLE_ID + '\\nMATCH_GIT_URL: ' + process.env.MATCH_GIT_URL);try{console.log('\\nRunning match development...');execSync('fastlane match development --app_identifier xyz.russ.russ5,xyz.russ.russ5.Extension',{stdio:'inherit'});console.log('\\nRunning build_dev lane...');execSync('fastlane build_dev',{stdio:'inherit'});}catch(e){console.log('\\nFirst approach failed, trying alternative approach...');try{execSync('fastlane build_dev_alt',{stdio:'inherit'});}catch(e2){console.error('\\n❌ Both approaches failed. Error:',e2.message);process.exit(1);}}console.log('\\n✅ Test completed!');\""
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/posix4e/russ5.git"
  },
  "keywords": [
    "safari",
    "extension"
  ],
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/posix4e/russ5/issues"
  },
  "homepage": "https://github.com/posix4e/russ5#readme"
}